#!/usr/bin/env zsh


#                            .8888b oo
#                            88   "
# .d8888b. .d8888b. 88d888b. 88aaa  dP .d8888b.
# 88'  `"" 88'  `88 88'  `88 88     88 88'  `88
# 88.  ... 88.  .88 88    88 88     88 88.  .88
# `88888P' `88888P' dP    dP dP     dP `8888P88
#                                           .88
#                                       d8888P

# Default values
name="I Sheet You Not"
bundleid="net.deanishe.alfred-i-sheet-you-not"

# Variables to delete from info.plist
unexported=(DEV)

# Clean the workflow (remove red generator elements)
clean=0

# Generator elements. Remove these from copied workflows
genelems=(3DABB6CA-310B-4696-B4B7-B72692AEA326)  # isyn File Filter
genelems+=(D68999C3-7184-428B-9DFA-386F6517EDAC) # isyn Script Filter
genelems+=(01FDAE7B-7189-488D-BF30-F05BDD1A8E1E) # Excel File Action
genelems+=(6FC91D20-6F28-40E4-838E-4353FC68714E) # Generator Run Script
genelems+=(99EB2F55-72A7-4649-85FA-DAF514ADB356) # Args & Vars utility
genelems+=(29259774-1638-463E-AC06-9F8AAEA6B941) # Workflow title Keyword

# Path to this script's directory (i.e. the workflow root)
here="$( cd "$( dirname "$0" )"; pwd )"

# Where the .alfredworkflow file will be saved
dest="$( pwd )"

# Temporary directory to build in. Deleted afterwards.
builddir="$( mktemp -d )"

# Current workflow version
version=$( "${here}/isyn" --version 2>&1 )

# Filename of generated workflow file
fname="I-Sheet-You-Not-${version}.alfredworkflow"

# Path of generated workflow file
wfpath="${dest}/${fname}"

# Overwrite existing .alfredworkflow file
force=0

# Open the generated file in Alfred afterwards
open_after=0


# dP                dP
# 88                88
# 88d888b. .d8888b. 88 88d888b. .d8888b. 88d888b. .d8888b.
# 88'  `88 88ooood8 88 88'  `88 88ooood8 88'  `88 Y8ooooo.
# 88    88 88.  ... 88 88.  .88 88.  ... 88             88
# dP    dP `88888P' dP 88Y888P' `88888P' dP       `88888P'
#                      88
#                      dP

# Print args to STDERR
log() {
  echo "$@" >&2
}

# Help message
usage() {
  cat <<EOS
buildme [-b <ID>] [-c] [-d <DIR>] [-f] [-n <NAME>] [-o] [-r]

Build the .alfredworkflow file for this workflow.

Usage:
    buildme [-b <ID>] [-d <DIR>] [-f] [-n <NAME>] [-o] [-r]
    buildme -h

Options:
    -b <ID>     Specify a bundle ID instead of the default.
    -c          Clean the workflow (i.e. remove red generator elements)
    -d <DIR>    Directory to save .alfredworkflow file in.
    -n <NAME>   The name of the workflow, e.g. "Bob's Cool Workflow"
    -r          Generate a random bundle ID.
    -f          Overwrite any existing file.
    -o          Open in Alfred after a successful build.
    -h          Show this message and exit.
EOS
}

# Generate a random bundle ID prefixed with the "proper" one
random_bundleid() {
  local pre='net.deanishe.alfred-i-sheet-you-not'
  # http://stackoverflow.com/a/19556743
  local s="$( base64 </dev/urandom | tr -dc 'a-zA-Z0-9' | head -c40 )"
  echo "${pre}.${s}"
}

# Delete build directory and (optionally) a file passed as $1
tidyup() {
  local p="$1"
  log "Deleting build directory ..."
  rm -rf "$builddir"
  [[ -f "$p" ]] && {
      log "Deleting workflow file ..."
      rm -f "$p"
  }
}

# Run a PlistBuddy command and exit the script if it fails
plbCmd() {
  local c="$1"
  /usr/libexec/PlistBuddy -c "$c" info.plist
  [[ $? -ne 0 ]] && {
    tidyup
    log "Error updating info.plist"
    exit 1
  }
}

# keyset <key> | Check if a key exists in info.plist
keyset() {
  local n="$1"
  /usr/libexec/PlistBuddy -c "Print :${n}" info.plist &> /dev/null
  return $?
}

# varset <varname> | Check if a variable exits in info.plist
varset() {
  local n="$1"
  keyset "variables:${n}"
  return $?
}

# setkey <key> <value> | Set a value in info.plist
setkey() {
  local n="$1"
  local v="$2"
  plbCmd "Set :${n} \"${v}\""
}

# getkey <key> | Get value from info.plist
getkey() {
  local n="$1"
  plbCmd "Print :${n}" info.plist
}

# delkey <key> | Remove a value from info.plist
delkey() {
  local n="$1"
  keyset "$n" && plbCmd "Delete :${n}" &> /dev/null
}

# setvar <varname> <value> | Set a variable in info.plist
setvar() {
  local n="$1"
  local v="$2"
  setkey "variables:${n}" "$v"
}

# delvar <varname> | Remove a variable from info.plist
delvar() {
  local n="$1"
  delkey "variables:${n}"
}

# objexists <index> | Check if specified object exists in info.plist
# objexists() {
#   local i=$1
#   keyset "objects:${i}"
#   return $?
# }

# objindex <uid> | Return the index of workflow object with specified UID.
objindex() {
  local n="$1"
  local cont=true
  local i=0
  while $cont; do
    keyset "objects:${i}" || cont=false
    local uid=$( getkey ":objects:${i}:uid" )
    [[ "$uid" == "$n" ]] && {
      echo "$i"
      cont=false
    }
    i=$((i + 1))
  done
}

# dP                oo dP       dP
# 88                   88       88
# 88d888b. dP    dP dP 88 .d888b88
# 88'  `88 88    88 88 88 88'  `88
# 88.  .88 88.  .88 88 88 88.  .88
# 88Y8888' `88888P' dP dP `88888P8

# Build the workflow in the repo root
build() {

  pushd "$here" 2>&1 > /dev/null

  # ---------------------------------------------------------
  # Copy workflow files into the build directory

  mkdir -p "$builddir"

  log "Copying workflow contents to build/ ..."

  rsync --recursive \
    --verbose \
    --delete-before \
    --delete-excluded \
    --perms \
    -f '- *.pyc' \
    -f '- xlrd/doc' \
    -f '- xlrd/examples' \
    -f '- *.dist-info' \
    -f '- ~$*.xlsx' \
    "./" "$builddir/"

  [[ $? -ne 0 ]] && {
    tidyup
    log "Error copying contents to build directory."
    exit 1
  }

  # ---------------------------------------------------------
  # Remove unexported variables from info.plist and
  # change bundle ID to the proper default.

  pushd "$builddir" 2>&1 > /dev/null

  log "Cleaning info.plist ..."

  setkey bundleid "$bundleid"
  # plbCmd "Set :bundleid ${bundleid}"
  log "Set bundle ID: ${bundleid}"
  setkey name "$name"
  # plbCmd "Set :name ${name}"
  log "Set workflow name: ${name}"
  setvar "DOC_PATH" "$DOC_PATH"
  # plbCmd "Set :variables:DOC_PATH \"${DOC_PATH}\""
  log "Set DOC_PATH: ${DOC_PATH}"
  for v in $unexported; do
    delvar "$v"
  done
  [[ $clean -eq 1 ]] && {
    for v in $genelems; do
      log "Removing object $v ..."
      local i=$(objindex $v)
      [[ -n "$i" ]] && {
        log "index : $i"
        delkey "objects:${i}"
      }
    done
  }
  # plbCmd 'Print :variables'
  # plbCmd 'Print :bundleid'

  # ---------------------------------------------------------
  # Build the .alfredworkflow file in the repo root

  log "Building ${fname} ..."

  mkdir -p "${dest}"

  [[ -f "${wfpath}" ]] && {
    rm -f "${wfpath}"
    log "Deleted existing workflow file."
  }

  # tree "$builddir"
  zip -rq8n .png:.xlsx "${wfpath}" .

  [[ $? -ne 0 ]] && {
    tidyup "${wfpath}"
    log "Error creating workflow file."
    exit 1
  }

  # ---------------------------------------------------------
  # Tidy up and go back to starting directory

  popd 2>&1 > /dev/null

  tidyup
  popd 2>&1 > /dev/null

  log "Built '${fname}' in '${dest}'"
}


#          dP oo
#          88
# .d8888b. 88 dP
# 88'  `"" 88 88
# 88.  ... 88 88
# `88888P' dP dP

while getopts ":b:cd:fhn:or" opt; do
  case $opt in
    b)
      bundleid="$OPTARG"
      ;;
    c)
      clean=1
      ;;
    d)
      dest="$OPTARG"
      ;;
    f)
      force=1
      ;;
    h)
      usage
      exit 0
      ;;
    n)
      name="$OPTARG"
      ;;
    o)
      open_after=1
      ;;
    r)
      bundleid="$( random_bundleid )"
      ;;
    \?)
      log "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))


wfpath="${dest}/${fname}"

[[ -f "${wfpath}" && "$force" -ne 1 ]] && {
  log "File exists: ${wfpath}"
  exit 1
}

log "building workflow '${name}' version ${version} ..."
build

[[ $open_after -eq 1 ]] && {
  open "${wfpath}"
}
